[
  {
    "title": "Observable Spec",
    "description": "An Observable is an object that can send multiple values to a consumer. An Observable has a subscribe method which accepts a generator and can send it any number of values.",
    "references": [
      {
        "label": "Observable Spec",
        "url": "https://github.com/jhusain/observable-spec"
      }
    ],
    "repo": {
      "label": "Observable Spec",
      "server": "https://github.com",
      "repoType": "git",
      "url": "https://github.com/jhusain/observable-spec"
    },
    "tags": [
      "Design Patterns", "Observable"
    ],
    "dataSet": "",
    "show": true
  },
  {
    "title": "101 Design Patterns & Tips for Developers",
    "description": "",
    "references": [
      {
        "label": "101 Design Patterns & Tips for Developers",
        "url": "https://sourcemaking.com/design-patterns-and-tips"
      }
    ],
    "repo": {
      "label": "",
      "server": "",
      "repoType": "",
      "url": ""
    },
    "tags": [
      "Design Patterns"
    ],
    "dataSet": "",
    "show": true
  },
  {
    "title": "The Node Way",
    "description": "",
    "references": [
      {
        "label": "The Node Way",
        "url": "http://thenodeway.io/"
      }
    ],
    "repo": {
      "label": "",
      "server": "",
      "repoType": "",
      "url": ""
    },
    "tags": [
      "Design Patterns"
    ],
    "dataSet": "",
    "show": true
  },
  {
    "title": "The strange world of Node.js design patterns",
    "description": "",
    "references": [
      {
        "label": "The strange world of Node.js design patterns",
        "url": "https://blog.risingstack.com/fundamental-node-js-design-patterns/"
      }
    ],
    "repo": {
      "label": "FredKSchott/the-node-way",
      "server": "https://github.com",
      "repoType": "git",
      "url": "https://github.com/FredKSchott/the-node-way"
    },
    "tags": [
      "Design Patterns"
    ],
    "dataSet": "",
    "show": true
  },
  {
    "title": "Law of Demeter",
    "description": "The Law of Demeter (LoD) or principle of least knowledge is a design guideline for developing software, particularly object-oriented programs. In its general form, the LoD is a specific case of loose coupling.",
    "references": [
      {
        "label": "Law of Demeter",
        "url": "https://en.wikipedia.org/wiki/Law_of_Demeter"
      }
    ],
    "repo": {
      "label": "",
      "server": "",
      "repoType": "",
      "url": ""
    },
    "tags": [
      "Design Patterns"
    ],
    "type": "article",
    "show": true
  },
  {
    "title": "Skinny Controller, Fat Model",
    "description": "The \"Fat Controller\" anti-pattern is shown and dissected, and the reader is taken through the process of refactoring it into a more readable, maintainable, and testable solution â€” 8-minute read",
    "references": [
      {
        "label": "Skinny controller fat model",
        "url": "http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model"
      }
    ],
    "repo": {
      "label": "",
      "server": "",
      "repoType": "",
      "url": ""
    },
    "type": "article",
    "tags": [
      "Design Patterns"
    ],
    "show": true
  },
  {
    "title": "Generifying your Design Patterns",
    "description": "Part I: The Visitor ",
    "references": [
      {
        "label": "Part I: The Visitor ",
        "url": "http://www.javaranch.com/journal/200601/visitor.html"
      }
    ],
    "repo": {
      "label": "",
      "server": "",
      "repoType": "",
      "url": ""
    },
    "tags": [
      "Design Patterns"
    ],
    "dataSet": "",
    "show": true
  }
]
